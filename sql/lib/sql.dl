/* This library has functions for supporting the translation of SQL into DDlog */

extern type DateTime

// functions that manipulate dates
extern function year(d: DateTime): bit<32>
extern function quarter(d: DateTime): bit<32>
extern function month(d: DateTime): bit<32>
extern function week(d: DateTime): bit<32>
extern function day(d: DateTime): bit<32>
extern function day_of_month(d: DateTime): bit<32>
extern function day_of_week(d: DateTime): bit<32>
extern function day_of_year(d: DateTime): bit<32>
extern function hour(d: DateTime): bit<32>
extern function minute(d: DateTime): bit<32>
extern function second(d: DateTime): bit<32>

function substr(s: string, start: signed<64>, end: signed<64>): string =
   string_substr(s, start as bit<64>, (start + end) as bit<64>)

function substr_N(s: Option<string>, start: signed<64>, end: signed<64>): Option<string> =
   match (s) {
      Some{.x = var a} -> Some{substr(a, start, end)},
      _                -> None
   }
function isNull(value: Option<'T>): bool =
   match (value) {
      Some{_} -> false,
      None    -> true
   }
function unwrapBool(v: Option<bool>): bool =
   match (v) {
      Some{.x = var a} -> a,
      _                -> false
   }
function abs(value: signed<64>): signed<64> =
   if (value < 0) (0-value) else value
function abs_N(value: Option<signed<64>>): Option<signed<64>> =
   match (value) {
       Some{.x = var a} -> Some{if (a < 0) (0-a) else a},
       _                -> None
   }

function agg_count_R(left: signed<64>, right: 'T): signed<64> =
    left + 1

function agg_min_R(left: signed<64>, right: signed<64>): signed<64> =
    if (left < right) left else right

function agg_max_R(left: signed<64>, right: signed<64>): signed<64> =
    if (left > right) left else right

function agg_sum_R(left: signed<64>, right: signed<64>): signed<64> =
    left + right

function agg_avg_R(left: (signed<64>, signed<64>), right: signed<64>): (signed<64>, signed<64>) =
    (left.0 + 1, left.0 + right)

function agg_count_N(left: signed<64>, right: Option<'T>): signed<64> =
   match (right) {
      Some{x} -> left + 1,
      None    -> left
   }

function agg_min_N(left: signed<64>, right: Option<signed<64>>): signed<64> =
   match (right) {
      Some{x} -> if (left < x) left else x,
      None    -> left
   }

function agg_max_N(left: signed<64>, right: Option<signed<64>>): signed<64> =
    match (right) {
        Some{x} -> if (left > x) left else x,
        None    -> left
    }

function agg_sum_N(left: signed<64>, right: Option<signed<64>>): signed<64> =
    match (right) {
        Some{x} -> left + x,
        None    -> left
    }

function agg_avg_N(left: (signed<64>, signed<64>), right: Option<signed<64>>): (signed<64>, signed<64>) =
    match (right) {
        Some{x} -> (left.0 + 1, left.1 + x),
        None    -> left
    }

function isNullAsInt(value: Option<'T>): signed<64> =
    match (value) {
        Some{x} -> 1,
        None    -> 0
    }

function unwrapNull(value: Option<signed<64>>): signed<64> =
    match (value) {
        Some{x} -> x,
        None    -> 0
    }

function avg(sum: signed<64>, count: signed<64>): signed<64> =
    /* TODO: should return a double */
    if (count == 0) 0 else (sum / count)